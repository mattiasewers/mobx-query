// @ts-nocheck

// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 1.1.1 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";


  function extractModels(models) {
  	let m = []
    for(let i = 0; i < models.length; i++) {
    	const name = models[i][2]
        const properties = models[i][6]
        m.push({
        	name: name,
            properties: properties.map(p => {
            	const name = p[0]
                const type = p[2]
                const ref = p[4]
                const hasRef = ref ? true : false
                return {
                	name,
                  type,
                  ref_type: hasRef ? ref[2] ? 'ref[]' : 'ref' : null
                }
            })
        })
    }
    return m
  }
  
  function extractActions(namespaces) {
  	let a = []
    for(let i = 0; i < namespaces.length; i++) {
    	const namespace = namespaces[i][2]
        const actions = namespaces[i][6]
        a.push({
        	namespace: namespace,
            actions: actions.map(a => {
            	const name = a[0]
              const type = a[4][0]
				      const variables = a[2] ? a[2][1].map(v => ({ name: v[1], type: v[3]})) : false
            	return {
                	name,
                    type,
                    variables
                }
            })
        })
    }
    return a
  }
  
  function extractInterfaces(interfaces) {
  	let x = []
    for(let i = 0; i < interfaces.length; i++) {
    	const name = interfaces[i][2]
        const rest = interfaces[i][6]
        const body = rest.map((a) => a[0] + (a[1][0] ? a[1][0] : "") + ": " + a[3][0] + "\n" )
        x.push("interface " + name + " {\n" + body.join("") + "}")
    }
    return x
  }

  function extractEnums(interfaces) {
  	let x = []
    for(let i = 0; i < interfaces.length; i++) {
    	const name = interfaces[i][2]
        const rest = interfaces[i][6]
        const body = rest.map((a) => a[0] + (a[1][0] ? a[1][0] : "") + (a[2] ? a[2][4][0][0] ? " = '" + a[2][4].join("") + "'" : " = " + a[2][4][1].join("") : '') + "," + "\n" )
        x.push("enum " + name + " {\n" + body.join("") + "}")
    }
    return x
  }
 


export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }
}

export interface ICached {
  nextPos: number;
  result: any;
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};

  const peg$startRuleFunctions: {[id: string]: any} = { start: peg$parsestart };
  let peg$startRuleFunction: () => any = peg$parsestart;

  const peg$c0 = function(models: any, namespaces: any, interfaces: any, enums: any): any {
        return {
  		    models: extractModels(models),
          namespaces: extractActions(namespaces),
          interfaces: extractInterfaces(interfaces),
          enums: extractEnums(enums)
        };
      };
  const peg$c1 = "interface";
  const peg$c2 = peg$literalExpectation("interface", false);
  const peg$c3 = "{";
  const peg$c4 = peg$literalExpectation("{", false);
  const peg$c5 = "}";
  const peg$c6 = peg$literalExpectation("}", false);
  const peg$c7 = "enum";
  const peg$c8 = peg$literalExpectation("enum", false);
  const peg$c9 = ",";
  const peg$c10 = peg$literalExpectation(",", false);
  const peg$c11 = "=";
  const peg$c12 = peg$literalExpectation("=", false);
  const peg$c13 = "'";
  const peg$c14 = peg$literalExpectation("'", false);
  const peg$c15 = /^[0-9]/;
  const peg$c16 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c17 = "model";
  const peg$c18 = peg$literalExpectation("model", false);
  const peg$c19 = "action";
  const peg$c20 = peg$literalExpectation("action", false);
  const peg$c21 = "(";
  const peg$c22 = peg$literalExpectation("(", false);
  const peg$c23 = ")";
  const peg$c24 = peg$literalExpectation(")", false);
  const peg$c25 = "@ref";
  const peg$c26 = peg$literalExpectation("@ref", false);
  const peg$c27 = "[]";
  const peg$c28 = peg$literalExpectation("[]", false);
  const peg$c29 = function(chars: any): any { return chars.join(""); };
  const peg$c30 = /^[A-z]/;
  const peg$c31 = peg$classExpectation([["A", "z"]], false, false);
  const peg$c32 = /^[\x80-\uFFFF]/;
  const peg$c33 = peg$classExpectation([["\x80", "\uFFFF"]], false, false);
  const peg$c34 = "\\";
  const peg$c35 = peg$literalExpectation("\\", false);
  const peg$c36 = "\r\n";
  const peg$c37 = peg$literalExpectation("\r\n", false);
  const peg$c38 = /^[ \t\r\n\f]/;
  const peg$c39 = peg$classExpectation([" ", "\t", "\r", "\n", "\f"], false, false);
  const peg$c40 = function(digits: any): any {
        return String.fromCharCode(parseInt(digits, 16));
      };
  const peg$c41 = /^[0-9a-f]/i;
  const peg$c42 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  const peg$c43 = /^[^\r\n\f0-9a-f]/i;
  const peg$c44 = peg$classExpectation(["\r", "\n", "\f", ["0", "9"], ["a", "f"]], true, true);
  const peg$c45 = /^[_a-z]/i;
  const peg$c46 = peg$classExpectation(["_", ["a", "z"]], false, true);
  const peg$c47 = "?";
  const peg$c48 = peg$literalExpectation("?", false);
  const peg$c49 = /^[_a-z0-9\-]/i;
  const peg$c50 = peg$classExpectation(["_", ["a", "z"], ["0", "9"], "-"], false, true);
  const peg$c51 = peg$otherExpectation("whitespace");
  const peg$c52 = "-";
  const peg$c53 = peg$literalExpectation("-", false);
  const peg$c54 = function(prefix: any, start: any, chars: any): any {
        return prefix + start + chars.join("");
      };
  const peg$c55 = peg$otherExpectation("identifier");
  const peg$c56 = function(ident: any): any { return ident; };

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  const peg$resultsCache: {[id: number]: ICached} = {};

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsestart(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 31 + 0;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsemodels();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsenamespaces();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseinterfaces();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseenums();
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1, s2, s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsemodels(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 1;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parsemodel();
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsemodel();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenamespaces(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 2;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parseaction();
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseaction();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseinterfaces(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 3;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parseinterface();
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseinterface();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseenums(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 4;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parseenum();
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseenum();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseinterface(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    const key = peg$currPos * 31 + 5;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 as any !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 as any !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseinterface_body();
                while (s8 as any !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseinterface_body();
                }
                if (s7 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c5;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseS();
                    while (s10 as any !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseS();
                    }
                    if (s9 as any !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseenum(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    const key = peg$currPos * 31 + 6;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 as any !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 as any !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseenum_body();
                while (s8 as any !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseenum_body();
                }
                if (s7 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c5;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseS();
                    while (s10 as any !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseS();
                    }
                    if (s9 as any !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseenum_body(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 31 + 7;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsename();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsename();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseenum_identifier();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseS();
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseS();
            }
            if (s5 as any !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseenum_identifier(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 31 + 8;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseS();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseS();
    }
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c11;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseS();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseS();
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s4 = peg$c13;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parsename();
            while (s7 as any !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsename();
            }
            if (s6 as any !== peg$FAILED) {
              s7 = [];
              s8 = peg$parsenumber();
              while (s8 as any !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parsenumber();
              }
              if (s7 as any !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s6 = peg$c13;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenumber(): any {
    let s0;

    const key = peg$currPos * 31 + 9;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c15.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseinterface_body(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 31 + 10;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsename();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsename();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseS();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseS();
        }
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsename();
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsename();
          }
          if (s4 as any !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseS();
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseS();
            }
            if (s5 as any !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsemodel(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    const key = peg$currPos * 31 + 11;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 as any !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 as any !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseproperty();
                while (s8 as any !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseproperty();
                }
                if (s7 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c5;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseS();
                    while (s10 as any !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseS();
                    }
                    if (s9 as any !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseaction(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    const key = peg$currPos * 31 + 12;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 123) {
              s5 = peg$c3;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 as any !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 as any !== peg$FAILED) {
                s7 = [];
                s8 = peg$parseaction_property();
                while (s8 as any !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parseaction_property();
                }
                if (s7 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s8 = peg$c5;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c6); }
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parseS();
                    while (s10 as any !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parseS();
                    }
                    if (s9 as any !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseaction_property(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 31 + 13;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsename();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsename();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsevariables();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 as any !== peg$FAILED) {
            s5 = [];
            s6 = peg$parsename();
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parsename();
            }
            if (s5 as any !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 as any !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 as any !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsevariables(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 31 + 14;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsevariable();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsevariable();
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c23;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c24); }
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsevariable(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 31 + 15;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseS();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseS();
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsename();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseS();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseS();
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parsename();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c10); }
            }
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseproperty(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 31 + 16;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIDENT();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseS();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseS();
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parsename();
        if (s3 as any !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 as any !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseref();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 as any !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 as any !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseref(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 31 + 17;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseS();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseS();
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c25) {
        s2 = peg$c25;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c27) {
          s3 = peg$c27;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetype(): any {
    let s0, s1, s2;

    const key = peg$currPos * 31 + 18;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenmstart();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenmstart();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c29(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsename(): any {
    let s0, s1, s2;

    const key = peg$currPos * 31 + 19;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenmstart();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenmstart();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c29(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseword(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 20;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (peg$c30.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c31); }
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        if (peg$c30.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenonascii(): any {
    let s0;

    const key = peg$currPos * 31 + 21;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c32.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseunicode(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 31 + 22;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c34;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseh();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseh();
        if (s5 as any === peg$FAILED) {
          s5 = null;
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseh();
          if (s6 as any === peg$FAILED) {
            s6 = null;
          }
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseh();
            if (s7 as any === peg$FAILED) {
              s7 = null;
            }
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parseh();
              if (s8 as any === peg$FAILED) {
                s8 = null;
              }
              if (s8 as any !== peg$FAILED) {
                s9 = peg$parseh();
                if (s9 as any === peg$FAILED) {
                  s9 = null;
                }
                if (s9 as any !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8, s9];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c36) {
          s3 = peg$c36;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 as any === peg$FAILED) {
          if (peg$c38.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseh(): any {
    let s0;

    const key = peg$currPos * 31 + 23;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c41.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseescape(): any {
    let s0, s1, s2;

    const key = peg$currPos * 31 + 24;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseunicode();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c34;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s1 as any !== peg$FAILED) {
        if (peg$c43.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c44); }
        }
        if (s2 as any !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenmstart(): any {
    let s0;

    const key = peg$currPos * 31 + 25;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c45.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c27) {
        s0 = peg$c27;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s0 = peg$c47;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        if (s0 as any === peg$FAILED) {
          s0 = peg$parsenonascii();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseescape();
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsenmchar(): any {
    let s0;

    const key = peg$currPos * 31 + 26;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c49.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parsenonascii();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseescape();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parses(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 27;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (peg$c38.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        if (peg$c38.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseS(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 28;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$parses();
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseident(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 31 + 29;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c52;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c53); }
    }
    if (s2 as any === peg$FAILED) {
      s2 = null;
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parsenmstart();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsenmchar();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsenmchar();
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c54(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIDENT(): any {
    let s0, s1;

    const key = peg$currPos * 31 + 30;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseident();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c56(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

